/** \file
 *  This C header file was generated by $ANTLR version 3.5.3
 *
 *     -  From the grammar source file : AwesomeLang.g
 *     -                            On : 2024-10-06 02:39:10
 *     -                for the parser : AwesomeLangParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
AwesomeLangParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pAwesomeLangParser, which is returned from a call to AwesomeLangParserNew().
 *
 * The methods in pAwesomeLangParser are  as follows:
 *
 *  - 
 void
      pAwesomeLangParser->list(pAwesomeLangParser)
 *  - 
 void
      pAwesomeLangParser->item(pAwesomeLangParser)
 *  - 
 void
      pAwesomeLangParser->binOp(pAwesomeLangParser)
 *  - 
 void
      pAwesomeLangParser->unOp(pAwesomeLangParser)
 *  - 
 void
      pAwesomeLangParser->typeRef(pAwesomeLangParser)
 *  - 
 void
      pAwesomeLangParser->builtin(pAwesomeLangParser)
 *  - 
 void
      pAwesomeLangParser->arrayType(pAwesomeLangParser)
 *  - 
 void
      pAwesomeLangParser->funcSignature(pAwesomeLangParser)
 *  - 
 void
      pAwesomeLangParser->sourceItem(pAwesomeLangParser)
 *  - 
 void
      pAwesomeLangParser->funcDef(pAwesomeLangParser)
 *  - 
 void
      pAwesomeLangParser->expr(pAwesomeLangParser)
 *  - 
 void
      pAwesomeLangParser->primaryExpr(pAwesomeLangParser)
 *  - 
 void
      pAwesomeLangParser->sliceExpr(pAwesomeLangParser)
 *  - 
 void
      pAwesomeLangParser->callExpr(pAwesomeLangParser)
 *  - 
 void
      pAwesomeLangParser->literal(pAwesomeLangParser)
 *  - 
 void
      pAwesomeLangParser->range(pAwesomeLangParser)
 *  - 
 void
      pAwesomeLangParser->rangeList(pAwesomeLangParser)
 *  - 
 void
      pAwesomeLangParser->statement(pAwesomeLangParser)
 *  - 
 void
      pAwesomeLangParser->ifStatement(pAwesomeLangParser)
 *  - 
 void
      pAwesomeLangParser->elseStatement(pAwesomeLangParser)
 *  - 
 void
      pAwesomeLangParser->loopStatement(pAwesomeLangParser)
 *  - 
 void
      pAwesomeLangParser->repeatStatement(pAwesomeLangParser)
 *  - 
 void
      pAwesomeLangParser->breakStatement(pAwesomeLangParser)
 *  - 
 void
      pAwesomeLangParser->expressionStatement(pAwesomeLangParser)
 *  - 
 void
      pAwesomeLangParser->blockStatement(pAwesomeLangParser)
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_AwesomeLangParser_H
#define _AwesomeLangParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct AwesomeLangParser_Ctx_struct AwesomeLangParser, * pAwesomeLangParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */


/** Context tracking structure for 
AwesomeLangParser

 */
struct AwesomeLangParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     void
     (*list)	(struct AwesomeLangParser_Ctx_struct * ctx);

     void
     (*item)	(struct AwesomeLangParser_Ctx_struct * ctx);

     void
     (*binOp)	(struct AwesomeLangParser_Ctx_struct * ctx);

     void
     (*unOp)	(struct AwesomeLangParser_Ctx_struct * ctx);

     void
     (*typeRef)	(struct AwesomeLangParser_Ctx_struct * ctx);

     void
     (*builtin)	(struct AwesomeLangParser_Ctx_struct * ctx);

     void
     (*arrayType)	(struct AwesomeLangParser_Ctx_struct * ctx);

     void
     (*funcSignature)	(struct AwesomeLangParser_Ctx_struct * ctx);

     void
     (*sourceItem)	(struct AwesomeLangParser_Ctx_struct * ctx);

     void
     (*funcDef)	(struct AwesomeLangParser_Ctx_struct * ctx);

     void
     (*expr)	(struct AwesomeLangParser_Ctx_struct * ctx);

     void
     (*primaryExpr)	(struct AwesomeLangParser_Ctx_struct * ctx);

     void
     (*sliceExpr)	(struct AwesomeLangParser_Ctx_struct * ctx);

     void
     (*callExpr)	(struct AwesomeLangParser_Ctx_struct * ctx);

     void
     (*literal)	(struct AwesomeLangParser_Ctx_struct * ctx);

     void
     (*range)	(struct AwesomeLangParser_Ctx_struct * ctx);

     void
     (*rangeList)	(struct AwesomeLangParser_Ctx_struct * ctx);

     void
     (*statement)	(struct AwesomeLangParser_Ctx_struct * ctx);

     void
     (*ifStatement)	(struct AwesomeLangParser_Ctx_struct * ctx);

     void
     (*elseStatement)	(struct AwesomeLangParser_Ctx_struct * ctx);

     void
     (*loopStatement)	(struct AwesomeLangParser_Ctx_struct * ctx);

     void
     (*repeatStatement)	(struct AwesomeLangParser_Ctx_struct * ctx);

     void
     (*breakStatement)	(struct AwesomeLangParser_Ctx_struct * ctx);

     void
     (*expressionStatement)	(struct AwesomeLangParser_Ctx_struct * ctx);

     void
     (*blockStatement)	(struct AwesomeLangParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred30_AwesomeLang)	(struct AwesomeLangParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred33_AwesomeLang)	(struct AwesomeLangParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred34_AwesomeLang)	(struct AwesomeLangParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred47_AwesomeLang)	(struct AwesomeLangParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred50_AwesomeLang)	(struct AwesomeLangParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred51_AwesomeLang)	(struct AwesomeLangParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct AwesomeLangParser_Ctx_struct * ctx);
    void	    (*free)   (struct AwesomeLangParser_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pAwesomeLangParser AwesomeLangParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pAwesomeLangParser AwesomeLangParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__11      11
#define T__12      12
#define T__13      13
#define T__14      14
#define T__15      15
#define T__16      16
#define T__17      17
#define T__18      18
#define T__19      19
#define T__20      20
#define T__21      21
#define T__22      22
#define T__23      23
#define T__24      24
#define T__25      25
#define T__26      26
#define T__27      27
#define T__28      28
#define T__29      29
#define T__30      30
#define T__31      31
#define T__32      32
#define T__33      33
#define T__34      34
#define T__35      35
#define T__36      36
#define T__37      37
#define T__38      38
#define T__39      39
#define T__40      40
#define T__41      41
#define T__42      42
#define T__43      43
#define T__44      44
#define T__45      45
#define T__46      46
#define T__47      47
#define T__48      48
#define T__49      49
#define T__50      50
#define T__51      51
#define T__52      52
#define T__53      53
#define T__54      54
#define BITS      4
#define BOOL      5
#define CHAR      6
#define DEC      7
#define HEX      8
#define IDENTIFIER      9
#define STRING      10
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for AwesomeLangParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
